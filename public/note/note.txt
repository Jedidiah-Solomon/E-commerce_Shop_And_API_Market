IF you want to use mailchimps, you can simply get your embedded form action attributes like this.

 <form
          action="https://webbrainees.us14.list-manage.com/subscribe/post?u=fd596490f33b374b61086a819&amp;id=e4a452051c&amp;f_id=0006f8e0f0"
          method="post"
          id="mc-embedded-subscribe-form"
          name="mc-embedded-subscribe-form"
          class="validate form"
          target="_blank"
        >
          <input
            type="email"
            name="EMAIL"
            placeholder="Your email address"
            required
          />
          <button type="submit" class="normal">Sign Up</button>
        </form>

    

** PAYSTACK PAYMENT **
Note:
onClose handles closure of the payment modal without successful payment.
cancel_action handles explicit cancellation or failure of the payment.

onClose:
The onClose function is triggered when the Paystack payment modal is closed without the payment being successfully completed. This can happen if the user simply closes the payment modal without proceeding to make a payment, regardless of the reason.
Use onClose to provide feedback to the user about the closure of the modal without completing the payment. It's useful for handling scenarios where the user exits the payment process prematurely.
cancel_action:
The cancel_action is specifically triggered when the payment is explicitly canceled or encounters a failure during the payment process. This could occur due to actions initiated by the user to cancel the payment or if the payment fails due to validation issues, declined transactions, or other errors.
Use cancel_action to handle explicit cancellations or failures that occur during the payment process, providing a specific action or URL to redirect the user in response to these events.
Example Scenarios:

onClose:
Scenario: The user opens the Paystack payment modal but decides to close it without proceeding to make a payment.
Action: The onClose function is triggered to display a message like "Transaction was not completed, window closed." It can also include a delayed redirect (setTimeout) to another page for further action or instruction.
cancel_action:
Scenario: The user initiates a payment but encounters an issue during the process, resulting in explicit cancellation or a payment failure.
Action: Paystack recognizes the cancellation or failure event and triggers the cancel_action, which directs the user to a designated URL like index.html to handle the situation (e.g., provide alternative payment options or support).

onClose:
The onClose function is triggered when the Paystack payment modal is closed without the payment being successfully completed. This can happen if the user simply closes the payment modal without proceeding to make a payment, regardless of the reason.
Use onClose to provide feedback to the user about the closure of the modal without completing the payment. It's useful for handling scenarios where the user exits the payment process prematurely.
cancel_action:
The cancel_action is specifically triggered when the payment is explicitly canceled or encounters a failure during the payment process. This could occur due to actions initiated by the user to cancel the payment or if the payment fails due to validation issues, declined transactions, or other errors.
Use cancel_action to handle explicit cancellations or failures that occur during the payment process, providing a specific action or URL to redirect the user in response to these events.
Example Scenarios:

onClose:
Scenario: The user opens the Paystack payment modal but decides to close it without proceeding to make a payment.
Action: The onClose function is triggered to display a message like "Transaction was not completed, window closed." It can also include a delayed redirect (setTimeout) to another page for further action or instruction.
cancel_action:
Scenario: The user initiates a payment but encounters an issue during the process, resulting in explicit cancellation or a payment failure.
Action: Paystack recognizes the cancellation or failure event and triggers the cancel_action, which directs the user to a designated URL like index.html to handle the situation (e.g., provide alternative payment options or support).
In summary, onClose handles any closure of the payment modal without successful payment, regardless of the reason for closure. On the other hand, cancel_action specifically addresses explicit cancellations or failures that occur during the payment process, providing a targeted response to these events. Each serves a distinct purpose in managing user interactions and feedback during the payment flow.
In summary, onClose handles any closure of the payment modal without successful payment, regardless of the reason for closure. On the other hand, cancel_action specifically addresses explicit cancellations or failures that occur during the payment process, providing a targeted response to these events. Each serves a
 distinct purpose in managing user interactions and feedback during the payment flow.


 XMLHTTPREQUEST

 XMLHttpRequest Setup:
const xhr = new XMLHttpRequest();: This line initializes a new instance of the XMLHttpRequest object, which is used to interact with servers and make HTTP requests.
Event Listener (onreadystatechange):
xhr.onreadystatechange = function() { ... }: This event handler is triggered whenever the readyState property of the XMLHttpRequest object changes. The readyState property represents the state of the request:
0 (UNSENT): The XMLHttpRequest object has been created, but open() has not been called yet.
1 (OPENED): open() has been called.
2 (HEADERS_RECEIVED): send() has been called and headers and status are available.
3 (LOADING): Downloading; responseText holds partial data.
4 (DONE): The operation is complete.
Handling Response:
if (this.readyState == 4) { ... }: Checks if the request is complete (readyState is 4), indicating that the server response is fully loaded.
Successful Response (status == 200):
if (this.status == 200) { ... }: Checks if the HTTP status code is 200 (OK), indicating a successful request.
Parsing JSON Response:
const data = JSON.parse(this.responseText);: Once the request is complete and successful, the responseText property of the XMLHttpRequest object contains the response data from the server as a string. JSON.parse() is used to convert this JSON-formatted string into a JavaScript object (data), which can then be processed and used in the application.
       



GitHub Usernames: 
GitHub Usernames Are Case-Insensitive but Case-Preserving:
When searching for a user in the GitHub UI or using the API, the case of the username does not matter.
However, the user found is returned with the proper capitalization defined by the user1.
In other words, GitHub treats usernames as case-insensitive when searching but preserves the original case when displaying the userâ€™s profile.